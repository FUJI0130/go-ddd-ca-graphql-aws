// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: proto/testsuite/v1/test_suite_service.proto

package testsuitev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TestSuiteServiceClient is the client API for TestSuiteService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TestSuiteServiceClient interface {
	// テストスイートの作成
	CreateTestSuite(ctx context.Context, in *CreateTestSuiteRequest, opts ...grpc.CallOption) (*TestSuite, error)
	// テストスイートの取得
	GetTestSuite(ctx context.Context, in *GetTestSuiteRequest, opts ...grpc.CallOption) (*TestSuite, error)
	// テストスイートの更新
	UpdateTestSuite(ctx context.Context, in *UpdateTestSuiteRequest, opts ...grpc.CallOption) (*TestSuite, error)
	// テストスイートのステータス更新
	UpdateTestSuiteStatus(ctx context.Context, in *UpdateTestSuiteStatusRequest, opts ...grpc.CallOption) (*TestSuite, error)
	// テストスイート一覧の取得
	ListTestSuites(ctx context.Context, in *ListTestSuitesRequest, opts ...grpc.CallOption) (*ListTestSuitesResponse, error)
	// テストスイートのストリーミング監視
	WatchTestSuite(ctx context.Context, in *GetTestSuiteRequest, opts ...grpc.CallOption) (TestSuiteService_WatchTestSuiteClient, error)
}

type testSuiteServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTestSuiteServiceClient(cc grpc.ClientConnInterface) TestSuiteServiceClient {
	return &testSuiteServiceClient{cc}
}

func (c *testSuiteServiceClient) CreateTestSuite(ctx context.Context, in *CreateTestSuiteRequest, opts ...grpc.CallOption) (*TestSuite, error) {
	out := new(TestSuite)
	err := c.cc.Invoke(ctx, "/testsuite.v1.TestSuiteService/CreateTestSuite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testSuiteServiceClient) GetTestSuite(ctx context.Context, in *GetTestSuiteRequest, opts ...grpc.CallOption) (*TestSuite, error) {
	out := new(TestSuite)
	err := c.cc.Invoke(ctx, "/testsuite.v1.TestSuiteService/GetTestSuite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testSuiteServiceClient) UpdateTestSuite(ctx context.Context, in *UpdateTestSuiteRequest, opts ...grpc.CallOption) (*TestSuite, error) {
	out := new(TestSuite)
	err := c.cc.Invoke(ctx, "/testsuite.v1.TestSuiteService/UpdateTestSuite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testSuiteServiceClient) UpdateTestSuiteStatus(ctx context.Context, in *UpdateTestSuiteStatusRequest, opts ...grpc.CallOption) (*TestSuite, error) {
	out := new(TestSuite)
	err := c.cc.Invoke(ctx, "/testsuite.v1.TestSuiteService/UpdateTestSuiteStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testSuiteServiceClient) ListTestSuites(ctx context.Context, in *ListTestSuitesRequest, opts ...grpc.CallOption) (*ListTestSuitesResponse, error) {
	out := new(ListTestSuitesResponse)
	err := c.cc.Invoke(ctx, "/testsuite.v1.TestSuiteService/ListTestSuites", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testSuiteServiceClient) WatchTestSuite(ctx context.Context, in *GetTestSuiteRequest, opts ...grpc.CallOption) (TestSuiteService_WatchTestSuiteClient, error) {
	stream, err := c.cc.NewStream(ctx, &TestSuiteService_ServiceDesc.Streams[0], "/testsuite.v1.TestSuiteService/WatchTestSuite", opts...)
	if err != nil {
		return nil, err
	}
	x := &testSuiteServiceWatchTestSuiteClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TestSuiteService_WatchTestSuiteClient interface {
	Recv() (*TestSuite, error)
	grpc.ClientStream
}

type testSuiteServiceWatchTestSuiteClient struct {
	grpc.ClientStream
}

func (x *testSuiteServiceWatchTestSuiteClient) Recv() (*TestSuite, error) {
	m := new(TestSuite)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TestSuiteServiceServer is the server API for TestSuiteService service.
// All implementations must embed UnimplementedTestSuiteServiceServer
// for forward compatibility
type TestSuiteServiceServer interface {
	// テストスイートの作成
	CreateTestSuite(context.Context, *CreateTestSuiteRequest) (*TestSuite, error)
	// テストスイートの取得
	GetTestSuite(context.Context, *GetTestSuiteRequest) (*TestSuite, error)
	// テストスイートの更新
	UpdateTestSuite(context.Context, *UpdateTestSuiteRequest) (*TestSuite, error)
	// テストスイートのステータス更新
	UpdateTestSuiteStatus(context.Context, *UpdateTestSuiteStatusRequest) (*TestSuite, error)
	// テストスイート一覧の取得
	ListTestSuites(context.Context, *ListTestSuitesRequest) (*ListTestSuitesResponse, error)
	// テストスイートのストリーミング監視
	WatchTestSuite(*GetTestSuiteRequest, TestSuiteService_WatchTestSuiteServer) error
	mustEmbedUnimplementedTestSuiteServiceServer()
}

// UnimplementedTestSuiteServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTestSuiteServiceServer struct {
}

func (UnimplementedTestSuiteServiceServer) CreateTestSuite(context.Context, *CreateTestSuiteRequest) (*TestSuite, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTestSuite not implemented")
}
func (UnimplementedTestSuiteServiceServer) GetTestSuite(context.Context, *GetTestSuiteRequest) (*TestSuite, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTestSuite not implemented")
}
func (UnimplementedTestSuiteServiceServer) UpdateTestSuite(context.Context, *UpdateTestSuiteRequest) (*TestSuite, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTestSuite not implemented")
}
func (UnimplementedTestSuiteServiceServer) UpdateTestSuiteStatus(context.Context, *UpdateTestSuiteStatusRequest) (*TestSuite, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTestSuiteStatus not implemented")
}
func (UnimplementedTestSuiteServiceServer) ListTestSuites(context.Context, *ListTestSuitesRequest) (*ListTestSuitesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTestSuites not implemented")
}
func (UnimplementedTestSuiteServiceServer) WatchTestSuite(*GetTestSuiteRequest, TestSuiteService_WatchTestSuiteServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchTestSuite not implemented")
}
func (UnimplementedTestSuiteServiceServer) mustEmbedUnimplementedTestSuiteServiceServer() {}

// UnsafeTestSuiteServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TestSuiteServiceServer will
// result in compilation errors.
type UnsafeTestSuiteServiceServer interface {
	mustEmbedUnimplementedTestSuiteServiceServer()
}

func RegisterTestSuiteServiceServer(s grpc.ServiceRegistrar, srv TestSuiteServiceServer) {
	s.RegisterService(&TestSuiteService_ServiceDesc, srv)
}

func _TestSuiteService_CreateTestSuite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTestSuiteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestSuiteServiceServer).CreateTestSuite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testsuite.v1.TestSuiteService/CreateTestSuite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestSuiteServiceServer).CreateTestSuite(ctx, req.(*CreateTestSuiteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestSuiteService_GetTestSuite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTestSuiteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestSuiteServiceServer).GetTestSuite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testsuite.v1.TestSuiteService/GetTestSuite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestSuiteServiceServer).GetTestSuite(ctx, req.(*GetTestSuiteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestSuiteService_UpdateTestSuite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTestSuiteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestSuiteServiceServer).UpdateTestSuite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testsuite.v1.TestSuiteService/UpdateTestSuite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestSuiteServiceServer).UpdateTestSuite(ctx, req.(*UpdateTestSuiteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestSuiteService_UpdateTestSuiteStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTestSuiteStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestSuiteServiceServer).UpdateTestSuiteStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testsuite.v1.TestSuiteService/UpdateTestSuiteStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestSuiteServiceServer).UpdateTestSuiteStatus(ctx, req.(*UpdateTestSuiteStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestSuiteService_ListTestSuites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTestSuitesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestSuiteServiceServer).ListTestSuites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testsuite.v1.TestSuiteService/ListTestSuites",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestSuiteServiceServer).ListTestSuites(ctx, req.(*ListTestSuitesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestSuiteService_WatchTestSuite_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetTestSuiteRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TestSuiteServiceServer).WatchTestSuite(m, &testSuiteServiceWatchTestSuiteServer{stream})
}

type TestSuiteService_WatchTestSuiteServer interface {
	Send(*TestSuite) error
	grpc.ServerStream
}

type testSuiteServiceWatchTestSuiteServer struct {
	grpc.ServerStream
}

func (x *testSuiteServiceWatchTestSuiteServer) Send(m *TestSuite) error {
	return x.ServerStream.SendMsg(m)
}

// TestSuiteService_ServiceDesc is the grpc.ServiceDesc for TestSuiteService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TestSuiteService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "testsuite.v1.TestSuiteService",
	HandlerType: (*TestSuiteServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTestSuite",
			Handler:    _TestSuiteService_CreateTestSuite_Handler,
		},
		{
			MethodName: "GetTestSuite",
			Handler:    _TestSuiteService_GetTestSuite_Handler,
		},
		{
			MethodName: "UpdateTestSuite",
			Handler:    _TestSuiteService_UpdateTestSuite_Handler,
		},
		{
			MethodName: "UpdateTestSuiteStatus",
			Handler:    _TestSuiteService_UpdateTestSuiteStatus_Handler,
		},
		{
			MethodName: "ListTestSuites",
			Handler:    _TestSuiteService_ListTestSuites_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchTestSuite",
			Handler:       _TestSuiteService_WatchTestSuite_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/testsuite/v1/test_suite_service.proto",
}

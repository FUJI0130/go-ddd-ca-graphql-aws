.PHONY: run test build docker-build docker-run test-integration

# 基本的なGo開発コマンド
run:
	go run cmd/api/main.go

test:
	go test ./...

build:
	go build -o bin/api cmd/api/main.go

# Dockerビルドと実行（基本）
docker-build:
	docker build -t go-ddd-ca .

docker-run:
	docker run -p 8080:8080 go-ddd-ca

# データベース操作
db-up:
	docker compose -f deployments/docker/docker-compose.yml up -d

db-down:
	docker compose -f deployments/docker/docker-compose.yml down

migrate:
	migrate -path scripts/migrations -database "postgresql://testuser:testpass@localhost:5432/test_management?sslmode=disable" up

migrate-down:
	migrate -path scripts/migrations -database "postgresql://testuser:testpass@localhost:5432/test_management?sslmode=disable" down

# テスト用DB操作
test-db-up:
	docker compose -f test/integration/postgres/docker-compose.test.yml up -d
	@echo "テスト用DB(ポート5433)を起動しました"
	@./scripts/setup/wait-for-db.sh

test-db-down:
	docker compose -f test/integration/postgres/docker-compose.test.yml down
	@echo "テスト用DBを停止しました"

# テスト関連コマンド
test-integration: test-db-up
	@echo "リポジトリ層の統合テスト実行中..."
	go test ./internal/infrastructure/persistence/postgres/... -v
	make test-db-down

test-graphql: test-db-up
	@echo "GraphQL統合テスト実行中..."
	TEST_ENV=true go test -v ./internal/interface/graphql/... -tags=integration
	make test-db-down

test-all-integration: test-db-up
	@echo "すべての統合テスト実行中..."
	go test ./internal/infrastructure/persistence/postgres/... -v
	TEST_ENV=true go test -v ./internal/interface/graphql/... -tags=integration
	make test-db-down

test-graphql-resolver:
	go test ./internal/interface/graphql/resolver/... -v

# Protocol Buffers
proto:
	protoc --proto_path=. \
		--go_out=. --go_opt=paths=source_relative \
		--go-grpc_out=. --go-grpc_opt=paths=source_relative \
		proto/testsuite/v1/*.proto

# サービス起動コマンド
run-graphql:
	go run cmd/graphql/main.go

run-grpc:
	go run cmd/grpc/main.go

# Dockerサービス別ビルドと実行
docker-build-api:
	docker build -t test-management-api --build-arg SERVICE_TYPE=api .

docker-build-graphql:
	docker build -t test-management-graphql --build-arg SERVICE_TYPE=graphql .

docker-build-grpc:
	docker build -t test-management-grpc --build-arg SERVICE_TYPE=grpc .

docker-run-api:
	docker run -p 8080:8080 --name test-management-api-container test-management-api

docker-run-graphql:
	docker run -p 8080:8080 --name test-management-graphql-container test-management-graphql

docker-run-grpc:
	docker run -p 50051:50051 --name test-management-grpc-container test-management-grpc

# Docker Compose コマンド
docker-compose-up-api:
	SERVICE_TYPE=api PORT=8080 docker-compose -f deployments/docker/docker-compose.dev.yml up -d

docker-compose-up-graphql:
	SERVICE_TYPE=graphql PORT=8081 docker-compose -f deployments/docker/docker-compose.dev.yml up -d

docker-compose-up-grpc:
	SERVICE_TYPE=grpc GRPC_PORT=50051 docker-compose -f deployments/docker/docker-compose.dev.yml up -d

docker-compose-down:
	docker-compose -f deployments/docker/docker-compose.dev.yml down

# Dockerテスト用スクリプト実行
test-docker-api:
	@echo "REST APIサービスのテストを実行..."
	@chmod +x scripts/docker/test-api.sh
	@scripts/docker/test-api.sh

test-docker-graphql:
	@echo "GraphQLサービスのテストを実行..."
	@chmod +x scripts/docker/test-graphql.sh
	@scripts/docker/test-graphql.sh

test-docker-grpc:
	@echo "gRPCサービスのテストを実行..."
	@chmod +x scripts/docker/test-grpc.sh
	@scripts/docker/test-grpc.sh

test-docker-all: test-docker-api test-docker-graphql test-docker-grpc
	@echo "すべてのDocker化サービスのテストが完了しました"

## AWS関連のターゲット ##

# 環境指定（デフォルトはdevelopment）
TF_ENV ?= development

# AWSインフラ状態の確認
tf-status:
	@chmod +x scripts/terraform/status.sh
	@scripts/terraform/status.sh $(TF_ENV)

# terraform.tfvarsファイルの更新（単一サービス）
update-tfvars:
	@if [ -z "$(SERVICE_TYPE)" ]; then \
		echo "エラー: SERVICE_TYPE環境変数を指定してください"; \
		echo "例: SERVICE_TYPE=api make update-tfvars"; \
		exit 1; \
	fi
	@echo "terraform.tfvarsを更新しています (サービス: $(SERVICE_TYPE))..."
	@chmod +x scripts/terraform/update-tfvars.sh
	@scripts/terraform/update-tfvars.sh $(TF_ENV) $(SERVICE_TYPE)

# terraform.tfvarsファイルの更新（全サービス）
update-tfvars-all:
	@echo "すべてのサービスタイプのterraform.tfvarsを更新しています..."
	@chmod +x scripts/terraform/update-tfvars.sh
	@scripts/terraform/update-tfvars.sh $(TF_ENV)

# ECRイメージの準備（単一サービス）
prepare-ecr-image:
	@if [ -z "$(SERVICE_TYPE)" ]; then \
		echo "エラー: SERVICE_TYPE環境変数を指定してください"; \
		echo "例: SERVICE_TYPE=api make prepare-ecr-image"; \
		exit 1; \
	fi
	@chmod +x scripts/docker/prepare-ecr-image.sh
	@scripts/docker/prepare-ecr-image.sh $(SERVICE_TYPE) $(TF_ENV)

# 全サービスのECRイメージ準備
prepare-all-ecr-images:
	@echo "全サービスのECRイメージを準備しています..."
	@make prepare-ecr-image SERVICE_TYPE=api TF_ENV=$(TF_ENV)
	@make prepare-ecr-image SERVICE_TYPE=graphql TF_ENV=$(TF_ENV)
	@make prepare-ecr-image SERVICE_TYPE=grpc TF_ENV=$(TF_ENV)
	@echo "全サービスのECRイメージ準備が完了しました"

# Terraformの初期化
tf-init:
	@chmod +x scripts/terraform/deploy.sh
	@scripts/terraform/deploy.sh init $(TF_ENV)

# Terraformのプラン作成
tf-plan:
	@echo "Terraformプランを作成します（環境: $(TF_ENV), モジュール: $(MODULE)）..."
	@cd deployments/terraform/environments/$(TF_ENV) && \
	terraform init && \
	terraform plan -out=tfplan

# Terraformの適用
tf-apply:
	@echo "Terraformプランを適用します（環境: $(TF_ENV)）..."
	@cd deployments/terraform/environments/$(TF_ENV) && \
	terraform apply -auto-approve tfplan

# Terraformの破棄
tf-destroy:
	@chmod +x scripts/terraform/deploy.sh
	@scripts/terraform/deploy.sh destroy $(TF_ENV) $(MODULE)

# 共有ECSクラスターのデプロイ
deploy-ecs-cluster:
	@echo "共有ECSクラスターをデプロイします（環境: $(TF_ENV)）..."
	@make tf-plan TF_ENV=$(TF_ENV) MODULE=shared-ecs-cluster
	@make tf-apply TF_ENV=$(TF_ENV)

# 個別サービスのデプロイ
deploy-ecs-service:
	@if [ -z "$(SERVICE_TYPE)" ]; then \
		echo "エラー: SERVICE_TYPE環境変数を指定してください"; \
		echo "例: SERVICE_TYPE=api make deploy-ecs-service"; \
		exit 1; \
	fi
	@echo "ECSサービスをデプロイします（サービス: $(SERVICE_TYPE), 環境: $(TF_ENV)）..."
	@make tf-plan TF_ENV=$(TF_ENV) MODULE=ecs-service SERVICE_TYPE=$(SERVICE_TYPE)
	@make tf-apply TF_ENV=$(TF_ENV)

# 個別ロードバランサーのデプロイ
deploy-service-lb:
	@if [ -z "$(SERVICE_TYPE)" ]; then \
		echo "エラー: SERVICE_TYPE環境変数を指定してください"; \
		echo "例: SERVICE_TYPE=api make deploy-service-lb"; \
		exit 1; \
	fi
	@echo "サービス用ロードバランサーをデプロイします（サービス: $(SERVICE_TYPE), 環境: $(TF_ENV)）..."
	@make tf-plan TF_ENV=$(TF_ENV) MODULE=load-balancer SERVICE_TYPE=$(SERVICE_TYPE)
	@make tf-apply TF_ENV=$(TF_ENV)

# APIサービスデプロイ（サービス+LB）
deploy-api: 
	@echo "APIサービスをデプロイします（環境: $(TF_ENV)）..."
	@make deploy-ecs-service SERVICE_TYPE=api TF_ENV=$(TF_ENV)
	@make deploy-service-lb SERVICE_TYPE=api TF_ENV=$(TF_ENV)

# GraphQLサービスデプロイ（サービス+LB）
deploy-graphql:
	@echo "GraphQLサービスをデプロイします（環境: $(TF_ENV)）..."
	@make deploy-ecs-service SERVICE_TYPE=graphql TF_ENV=$(TF_ENV)
	@make deploy-service-lb SERVICE_TYPE=graphql TF_ENV=$(TF_ENV)

# gRPCサービスデプロイ（サービス+LB）
deploy-grpc:
	@echo "gRPCサービスをデプロイします（環境: $(TF_ENV)）..."
	@make deploy-ecs-service SERVICE_TYPE=grpc TF_ENV=$(TF_ENV)
	@make deploy-service-lb SERVICE_TYPE=grpc TF_ENV=$(TF_ENV)

# 全サービスデプロイ
deploy-all-services: deploy-api deploy-graphql deploy-grpc
	@echo "全サービスのデプロイが完了しました"

# インフラ全体のデプロイ
deploy-infrastructure: deploy-ecs-cluster deploy-all-services
	@echo "インフラストラクチャのデプロイが完了しました"

# サービスデプロイの検証
verify-service:
	@if [ -z "$(SERVICE_TYPE)" ]; then \
		echo "エラー: SERVICE_TYPE環境変数を指定してください"; \
		echo "例: SERVICE_TYPE=api make verify-service"; \
		exit 1; \
	fi
	@echo "サービスの動作を検証しています（サービス: $(SERVICE_TYPE), 環境: $(TF_ENV)）..."
	@chmod +x scripts/verification/verify-ecs-$(SERVICE_TYPE).sh
	@scripts/verification/verify-ecs-$(SERVICE_TYPE).sh $(TF_ENV)

# 全サービス検証
verify-all-services:
	@echo "全サービスの動作を検証しています（環境: $(TF_ENV)）..."
	@make verify-service SERVICE_TYPE=api TF_ENV=$(TF_ENV) || echo "警告: APIサービスの検証に失敗しました"
	@make verify-service SERVICE_TYPE=graphql TF_ENV=$(TF_ENV) || echo "警告: GraphQLサービスの検証に失敗しました"
	@make verify-service SERVICE_TYPE=grpc TF_ENV=$(TF_ENV) || echo "警告: gRPCサービスの検証に失敗しました"
	@echo "全サービスの検証が完了しました"

# アプリケーションのデプロイワークフロー（統合版）
deploy-app-workflow:
	@echo "アプリケーションのデプロイワークフローを開始します..."
	@echo "1. ECRイメージを準備しています..."
	@make prepare-all-ecr-images TF_ENV=$(TF_ENV)
	@echo "2. terraform.tfvarsを更新しています..."
	@make update-tfvars-all TF_ENV=$(TF_ENV)
	@echo "3. インフラストラクチャをデプロイしています..."
	@make deploy-infrastructure TF_ENV=$(TF_ENV)
	@echo "4. デプロイの安定化を待機しています (60秒)..."
	@sleep 60
	@echo "5. デプロイ結果を検証しています..."
	@make verify-all-services TF_ENV=$(TF_ENV) || (echo "警告: 一部のサービス検証に失敗しました。詳細なログを確認してください。" && exit 1)
	@echo "アプリケーションデプロイワークフローが完了しました"

# 個別のインフラストラクチャコンポーネントのデプロイ
deploy-network:
	@chmod +x scripts/terraform/deploy.sh
	@scripts/terraform/deploy.sh apply $(TF_ENV) network

deploy-database:
	@chmod +x scripts/terraform/deploy.sh
	@scripts/terraform/deploy.sh apply $(TF_ENV) database

# データベースの完全デプロイ（環境変数読み込み→状態確認→プラン→デプロイ→検証）
deploy-db-complete:
	@echo "データベースの完全デプロイを開始します..."
	@if [ -f ~/.env.terraform ]; then \
		echo "環境変数を読み込んでいます..."; \
		. ~/.env.terraform; \
	else \
		echo "警告: ~/.env.terraform が見つかりません。データベース認証情報が設定されているか確認してください。"; \
	fi
	@echo "現在のインフラ状況を確認しています..."
	@make tf-status
	@echo "データベースデプロイのプランを作成しています..."
	@make tf-plan MODULE=database
	@echo "データベースをデプロイしています..."
	@make deploy-database
	@echo "デプロイ結果を確認しています..."
	@make tf-status
	@echo "データベースデプロイプロセスが完了しました"

# サービス別のECSデプロイコマンド（レガシー互換用）
deploy-ecs-api:
	@make deploy-ecs-service SERVICE_TYPE=api TF_ENV=$(TF_ENV)

deploy-ecs-graphql:
	@make deploy-ecs-service SERVICE_TYPE=graphql TF_ENV=$(TF_ENV)

deploy-ecs-grpc:
	@make deploy-ecs-service SERVICE_TYPE=grpc TF_ENV=$(TF_ENV)

# ロードバランサー別デプロイコマンド（レガシー互換用）
deploy-lb-api:
	@make deploy-service-lb SERVICE_TYPE=api TF_ENV=$(TF_ENV)

deploy-lb-graphql:
	@make deploy-service-lb SERVICE_TYPE=graphql TF_ENV=$(TF_ENV)

deploy-lb-grpc:
	@make deploy-service-lb SERVICE_TYPE=grpc TF_ENV=$(TF_ENV)

# すべてのECSサービスデプロイ
deploy-all-ecs-services: deploy-ecs-api deploy-ecs-graphql deploy-ecs-grpc
	@echo "すべてのECSサービスのデプロイが完了しました"

# すべてのロードバランサーデプロイ
deploy-all-loadbalancers: deploy-lb-api deploy-lb-graphql deploy-lb-grpc
	@echo "すべてのロードバランサーのデプロイが完了しました"

# サービス別検証タスク（レガシー互換用）
verify-api-service:
	@make verify-service SERVICE_TYPE=api TF_ENV=$(TF_ENV)

verify-graphql-service:
	@make verify-service SERVICE_TYPE=graphql TF_ENV=$(TF_ENV)

verify-grpc-service:
	@make verify-service SERVICE_TYPE=grpc TF_ENV=$(TF_ENV)

# ECRイメージ準備からtfvars更新までの一括実行
prepare-and-update:
	@echo "ECRイメージを準備し、terraform.tfvarsを更新します..."
	@make prepare-all-ecr-images TF_ENV=$(TF_ENV)
	@make update-tfvars-all TF_ENV=$(TF_ENV)
	@echo "イメージ準備とterraform.tfvars更新が完了しました"

# ヘルプコマンド
tf-help:
	@echo "利用可能なTerraformコマンド:"
	@echo "  tf-init                - Terraformの初期化"
	@echo "  tf-plan                - 変更計画の作成"
	@echo "  tf-apply               - 変更の適用"
	@echo "  tf-destroy             - リソースの破棄"
	@echo "  tf-status              - デプロイ状態の確認"
	@echo ""
	@echo "ワークフローコマンド:"
	@echo "  deploy-app-workflow    - 完全なアプリケーションデプロイワークフロー"
	@echo "  prepare-all-ecr-images - すべてのサービスのECRイメージを準備"
	@echo "  update-tfvars-all      - すべてのサービスのterraform.tfvars更新"
	@echo "  deploy-infrastructure  - インフラストラクチャ全体のデプロイ"
	@echo "  verify-all-services    - すべてのサービスの検証"
	@echo ""
	@echo "インフラストラクチャコマンド:"
	@echo "  deploy-ecs-cluster     - 共有ECSクラスターのデプロイ"
	@echo "  deploy-network         - ネットワークインフラのデプロイ"
	@echo "  deploy-database        - データベース環境のデプロイ"
	@echo "  deploy-db-complete     - データベースの完全デプロイ"
	@echo ""
	@echo "サービス別コマンド:"
	@echo "  deploy-api             - APIサービスのデプロイ（ECS+LB）"
	@echo "  deploy-graphql         - GraphQLサービスのデプロイ（ECS+LB）"
	@echo "  deploy-grpc            - gRPCサービスのデプロイ（ECS+LB）"
	@echo "  deploy-all-services    - すべてのサービスのデプロイ"
	@echo ""
	@echo "環境の指定:"
	@echo "  TF_ENV=production make tf-plan"
	@echo "  TF_ENV=production make deploy-network"
	@echo ""
	@echo "サービスタイプの指定:"
	@echo "  SERVICE_TYPE=api make deploy-ecs-service"
	@echo "  SERVICE_TYPE=graphql make verify-service"

# SSMパラメータの検証と作成
verify-ssm-params:
	@echo "SSMパラメータの存在を確認しています..."
	@if aws ssm get-parameter --name "/${TF_ENV}/database/password" --with-decryption >/dev/null 2>&1; then \
		echo "SSMパラメータは既に存在します"; \
	else \
		echo "SSMパラメータが存在しません。作成します..."; \
		if [ -z "$(TF_VAR_db_password)" ]; then \
			echo "DB_PASSWORDが設定されていません"; \
			read -sp "データベースパスワードを入力してください: " DB_PASS; \
			echo; \
			aws ssm put-parameter --name "/${TF_ENV}/database/password" --type SecureString --value "$$DB_PASS"; \
		else \
			aws ssm put-parameter --name "/${TF_ENV}/database/password" --type SecureString --value "$(TF_VAR_db_password)"; \
		fi; \
		echo "SSMパラメータを作成しました"; \
	fi

# サービスデプロイ前にパラメータ確認を行うターゲット
deploy-api-with-params: verify-ssm-params deploy-api
deploy-graphql-with-params: verify-ssm-params deploy-graphql
deploy-grpc-with-params: verify-ssm-params deploy-grpc
deploy-all-with-params: verify-ssm-params deploy-all-services

# アプリケーションのデプロイワークフローを更新（パラメータ確認を追加）
deploy-app-workflow-secure:
	@echo "アプリケーションのセキュアなデプロイワークフローを開始します..."
	@echo "1. SSMパラメータを確認・作成しています..."
	@make verify-ssm-params TF_ENV=$(TF_ENV)
	@echo "2. ECRイメージを準備しています..."
	@make prepare-all-ecr-images TF_ENV=$(TF_ENV)
	@echo "3. terraform.tfvarsを更新しています..."
	@make update-tfvars-all TF_ENV=$(TF_ENV)
	@echo "4. インフラストラクチャをデプロイしています..."
	@make deploy-infrastructure TF_ENV=$(TF_ENV)
	@echo "5. デプロイの安定化を待機しています (60秒)..."
	@sleep 60
	@echo "6. デプロイ結果を検証しています..."
	@make verify-all-services TF_ENV=$(TF_ENV) || (echo "警告: 一部のサービス検証に失敗しました。詳細なログを確認してください。" && exit 1)
	@echo "アプリケーションデプロイワークフローが完了しました"

# 1. サービス準備 (単一サービス用)
prepare-service:
	@echo "サービスの準備を開始します ($(SERVICE_TYPE))..."
	@make prepare-ecr-image SERVICE_TYPE=$(SERVICE_TYPE) TF_ENV=$(TF_ENV)
	@make update-tfvars SERVICE_TYPE=$(SERVICE_TYPE) TF_ENV=$(TF_ENV)
	@make verify-ssm-params TF_ENV=$(TF_ENV)

# 2. サービスデプロイと検証 (単一サービス用)
deploy-service-with-logs:
	@echo "サービスのデプロイと検証を開始します ($(SERVICE_TYPE))..."
	@make deploy-$(SERVICE_TYPE) TF_ENV=$(TF_ENV)
	@echo "デプロイの安定化を待機しています (30秒)..."
	@sleep 30
	@LOG_GROUP="/ecs/development-$(SERVICE_TYPE)" && \
	LOG_STREAM=$$(aws logs describe-log-streams --log-group-name $$LOG_GROUP --order-by LastEventTime --descending --limit 1 --query 'logStreams[0].logStreamName' --output text) && \
	echo "最新のログを確認しています..." && \
	aws logs get-log-events --log-group-name $$LOG_GROUP --log-stream-name $$LOG_STREAM --limit 20
	@make verify-service SERVICE_TYPE=$(SERVICE_TYPE) TF_ENV=$(TF_ENV) || (echo "警告: $(SERVICE_TYPE)サービスの検証に失敗しました。ログを確認してください。" && exit 1)

# 3. APIサービスのワンコマンド再デプロイ
# APIサービスの再デプロイ
redeploy-api:
	@echo "APIサービスを再デプロイしています..."
	@echo "1. サービスを停止中..."
	aws ecs update-service --cluster development-shared-cluster --service development-api --desired-count 0
	@echo "サービスが停止するまで待機中（30秒）..."
	sleep 30
	@echo "2. サービスを強制再デプロイで再開中..."
	aws ecs update-service --cluster development-shared-cluster --service development-api --desired-count 1 --force-new-deployment
	@echo "3. デプロイ状況を確認..."
	aws ecs describe-services --cluster development-shared-cluster --services development-api --query 'services[0].{Status:status,RunningCount:runningCount,DesiredCount:desiredCount}'
	@echo "4. ログ確認のために60秒待機..."
	sleep 60
	@echo "5. 最新のログを確認..."
	$(eval LOG_GROUP := /ecs/development-api)
	$(eval LOG_STREAM := $(shell aws logs describe-log-streams --log-group-name $(LOG_GROUP) --order-by LastEventTime --descending --limit 1 --query 'logStreams[0].logStreamName' --output text))
	aws logs get-log-events --log-group-name $(LOG_GROUP) --log-stream-name $(LOG_STREAM) --limit 30

# 4. GraphQLサービスのワンコマンド再デプロイ
redeploy-graphql:
	@make prepare-service SERVICE_TYPE=graphql TF_ENV=$(TF_ENV)
	@make deploy-service-with-logs SERVICE_TYPE=graphql TF_ENV=$(TF_ENV)

# 5. gRPCサービスのワンコマンド再デプロイ
redeploy-grpc:
	@make prepare-service SERVICE_TYPE=grpc TF_ENV=$(TF_ENV)
	@make deploy-service-with-logs SERVICE_TYPE=grpc TF_ENV=$(TF_ENV)
package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.76

import (
	"context"

	"github.com/FUJI0130/go-ddd-ca/internal/interface/graphql/auth"
	"github.com/FUJI0130/go-ddd-ca/internal/interface/graphql/model"
	"github.com/FUJI0130/go-ddd-ca/internal/usecase/port"
)

// CreateUser は新規ユーザーを作成します
func (r *mutationResolver) CreateUser(ctx context.Context, input model.CreateUserInput) (*model.User, error) {
	// リクエストデータの準備
	request := &port.CreateUserRequest{
		Username: input.Username,
		Password: input.Password,
		Role:     input.Role,
	}

	// ユースケースの呼び出し
	user, err := r.UserManagementUseCase.CreateUser(ctx, request)
	if err != nil {
		return nil, err
	}

	// エンティティからGraphQLモデルへの変換
	return &model.User{
		ID:        user.ID,
		Username:  user.Username,
		Role:      user.Role.String(),
		CreatedAt: user.CreatedAt, // ← 追加
		UpdatedAt: user.UpdatedAt,
	}, nil
}

// ChangePassword はユーザー自身のパスワードを変更します
func (r *mutationResolver) ChangePassword(ctx context.Context, oldPassword string, newPassword string) (bool, error) {
	// 認証コンテキストからユーザーIDを取得
	user := auth.GetUserFromContext(ctx)
	if user == nil {
		return false, nil
	}

	// ユースケースの呼び出し
	err := r.UserManagementUseCase.ChangePassword(ctx, user.ID, oldPassword, newPassword)
	if err != nil {
		return false, err
	}

	return true, nil
}

// ResetPassword は管理者が他のユーザーのパスワードをリセットします
func (r *mutationResolver) ResetPassword(ctx context.Context, userID string, newPassword string) (bool, error) {
	// ユースケースの呼び出し
	err := r.UserManagementUseCase.ResetPassword(ctx, userID, newPassword)
	if err != nil {
		return false, err
	}

	return true, nil
}

// DeleteUser はユーザーを削除します
func (r *mutationResolver) DeleteUser(ctx context.Context, userID string) (bool, error) {
	// ユースケースの呼び出し
	err := r.UserManagementUseCase.DeleteUser(ctx, userID)
	if err != nil {
		return false, err
	}

	return true, nil
}

// internal/interface/graphql/resolver/user_management.resolvers.go に追加
// UpdateUser はユーザー情報を更新します
func (r *mutationResolver) UpdateUser(ctx context.Context, userID string, input model.UpdateUserInput) (*model.User, error) {
	// リクエストデータの準備
	request := &port.UpdateUserRequest{
		Username: input.Username,
		Role:     input.Role,
	}

	// ユースケースの呼び出し
	user, err := r.UserManagementUseCase.UpdateUser(ctx, userID, request)
	if err != nil {
		return nil, err
	}

	// エンティティからGraphQLモデルへの変換
	return &model.User{
		ID:        user.ID,
		Username:  user.Username,
		Role:      user.Role.String(),
		CreatedAt: user.CreatedAt,
		UpdatedAt: user.UpdatedAt,
	}, nil
}

// Users は全ユーザーの一覧を取得します
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	// ✅ 正しい実装：ユースケース経由でアクセス
	users, err := r.UserManagementUseCase.FindAllUsers(ctx)
	if err != nil {
		return nil, err
	}

	// エンティティからGraphQLモデルへの変換
	result := make([]*model.User, len(users))
	for i, user := range users {
		result[i] = &model.User{
			ID:          user.ID,
			Username:    user.Username,
			Role:        user.Role.String(),
			CreatedAt:   user.CreatedAt,
			UpdatedAt:   user.UpdatedAt,
			LastLoginAt: user.LastLoginAt,
		}
	}

	return result, nil
}

// User は指定されたIDのユーザーを取得します
func (r *queryResolver) User(ctx context.Context, id string) (*model.User, error) {
	// ✅ 正しい実装：ユースケース経由でアクセス
	user, err := r.UserManagementUseCase.FindUserByID(ctx, id)
	if err != nil {
		return nil, err
	}

	// エンティティからGraphQLモデルへの変換
	return &model.User{
		ID:          user.ID,
		Username:    user.Username,
		Role:        user.Role.String(),
		CreatedAt:   user.CreatedAt,
		UpdatedAt:   user.UpdatedAt,
		LastLoginAt: user.LastLoginAt,
	}, nil
}

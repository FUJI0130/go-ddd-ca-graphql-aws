// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"bytes"
	"fmt"
	"io"
	"strconv"
	"time"
)

type CreateTestSuiteInput struct {
	Name                 string    `json:"name"`
	Description          *string   `json:"description,omitempty"`
	EstimatedStartDate   time.Time `json:"estimatedStartDate"`
	EstimatedEndDate     time.Time `json:"estimatedEndDate"`
	RequireEffortComment *bool     `json:"requireEffortComment,omitempty"`
}

type CreateUserInput struct {
	Username string `json:"username"`
	Password string `json:"password"`
	Role     string `json:"role"`
}

type Mutation struct {
}

type PageInfo struct {
	HasNextPage     bool    `json:"hasNextPage"`
	HasPreviousPage bool    `json:"hasPreviousPage"`
	StartCursor     *string `json:"startCursor,omitempty"`
	EndCursor       *string `json:"endCursor,omitempty"`
}

type Query struct {
}

type Subscription struct {
}

type TestSuiteConnection struct {
	Edges      []*TestSuiteEdge `json:"edges"`
	PageInfo   *PageInfo        `json:"pageInfo"`
	TotalCount int              `json:"totalCount"`
}

type TestSuiteEdge struct {
	Node   *TestSuite `json:"node"`
	Cursor string     `json:"cursor"`
}

type UpdateTestSuiteInput struct {
	Name                 *string    `json:"name,omitempty"`
	Description          *string    `json:"description,omitempty"`
	EstimatedStartDate   *time.Time `json:"estimatedStartDate,omitempty"`
	EstimatedEndDate     *time.Time `json:"estimatedEndDate,omitempty"`
	RequireEffortComment *bool      `json:"requireEffortComment,omitempty"`
}

type UpdateUserInput struct {
	Username string `json:"username"`
	Role     string `json:"role"`
}

type Priority string

const (
	PriorityCritical Priority = "CRITICAL"
	PriorityHigh     Priority = "HIGH"
	PriorityMedium   Priority = "MEDIUM"
	PriorityLow      Priority = "LOW"
)

var AllPriority = []Priority{
	PriorityCritical,
	PriorityHigh,
	PriorityMedium,
	PriorityLow,
}

func (e Priority) IsValid() bool {
	switch e {
	case PriorityCritical, PriorityHigh, PriorityMedium, PriorityLow:
		return true
	}
	return false
}

func (e Priority) String() string {
	return string(e)
}

func (e *Priority) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Priority(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Priority", str)
	}
	return nil
}

func (e Priority) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *Priority) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e Priority) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type SuiteStatus string

const (
	SuiteStatusPreparation SuiteStatus = "PREPARATION"
	SuiteStatusInProgress  SuiteStatus = "IN_PROGRESS"
	SuiteStatusCompleted   SuiteStatus = "COMPLETED"
	SuiteStatusSuspended   SuiteStatus = "SUSPENDED"
)

var AllSuiteStatus = []SuiteStatus{
	SuiteStatusPreparation,
	SuiteStatusInProgress,
	SuiteStatusCompleted,
	SuiteStatusSuspended,
}

func (e SuiteStatus) IsValid() bool {
	switch e {
	case SuiteStatusPreparation, SuiteStatusInProgress, SuiteStatusCompleted, SuiteStatusSuspended:
		return true
	}
	return false
}

func (e SuiteStatus) String() string {
	return string(e)
}

func (e *SuiteStatus) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SuiteStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SuiteStatus", str)
	}
	return nil
}

func (e SuiteStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *SuiteStatus) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e SuiteStatus) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type TestStatus string

const (
	TestStatusCreated       TestStatus = "CREATED"
	TestStatusTesting       TestStatus = "TESTING"
	TestStatusFixing        TestStatus = "FIXING"
	TestStatusReviewWaiting TestStatus = "REVIEW_WAITING"
	TestStatusReviewing     TestStatus = "REVIEWING"
	TestStatusCompleted     TestStatus = "COMPLETED"
	TestStatusRetesting     TestStatus = "RETESTING"
)

var AllTestStatus = []TestStatus{
	TestStatusCreated,
	TestStatusTesting,
	TestStatusFixing,
	TestStatusReviewWaiting,
	TestStatusReviewing,
	TestStatusCompleted,
	TestStatusRetesting,
}

func (e TestStatus) IsValid() bool {
	switch e {
	case TestStatusCreated, TestStatusTesting, TestStatusFixing, TestStatusReviewWaiting, TestStatusReviewing, TestStatusCompleted, TestStatusRetesting:
		return true
	}
	return false
}

func (e TestStatus) String() string {
	return string(e)
}

func (e *TestStatus) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TestStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TestStatus", str)
	}
	return nil
}

func (e TestStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *TestStatus) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e TestStatus) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}
